AWSTemplateFormatVersion: "2010-09-09"
Description: Server setup and load balancing setup
Parameters:
  ProjectName:
    Description: The project is called as Udagram
    Type: String
  BucketName:
    Description: The name of the S3 bucket containing the zipped application code to be deployed
    Type: String
    AllowedPattern: ^[0-9a-zA-Z][0-9a-zA-Z-]*$
  Deployment:
    Description: The application code archive (must end with .zip)
    Type: String
    AllowedPattern: ^.*\.zip$
Resources:
  #S3Bucket read only role and policy
  S3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Policy
    DependsOn: S3ReadOnlyEC2
    Properties:
      PolicyName: UdacityS3ReadOnlyEC2
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource: '*'
      Roles:
        - !Ref S3ReadOnlyEC2
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: 'S3ReadOnlyEC2'
#SecurityGroups for Web Server Auto Scalling / Load Balancing / Bostion Host AutoSG
  AutoSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This is autoscalling security group
      GroupName: AUTOSG
      VpcId:
       Fn::ImportValue:
         !Sub '${ProjectName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue:
              !Sub '${ProjectName}-Pubsub1'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue:
              !Sub '${ProjectName}-Pubsub2'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} AutoSG
  LoadSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This is loadbalancing security group
      GroupName: LoadSG
      VpcId:
        Fn::ImportValue:
          !Sub '${ProjectName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} LoadSG
  BosServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: BostionSG
      GroupDescription: test bostionSG ji
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 157.50.48.150/32
      VpcId:
        Fn::ImportValue:
          !Sub '${ProjectName}-VPCID'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} BostionSG
#Web Server Autoscalling Launch configuration
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install unzip awscli -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          sudo rm -rf /var/www/html/index.html
          sudo aws s3 cp s3://${BucketName}/${Deployment} /var/www/html
          sudo unzip /var/www/html/udacity.zip -d /var/www/html
          sudo systemctl restart apache2.service
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      InstanceType: t2.medium  #Its has 2 vCPU and 4GB RAM
      ImageId: ami-003634241a8fcdec0  #Ubuntu 18 LTS
      #ImageId: ami-003634241a8fcdec0
      #InstanceType: t2.micro
      #KeyName: mykey
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      SecurityGroups:
        - Ref: AutoSG
  #Web Server Autoscalling setup
  AutoScalGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
       Ref: LaunchConfig
      MaxSize: '6'
      DesiredCapacity: '4'
      MinSize: '4'
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub '${ProjectName}-PRIV-SUBNET'
      TargetGroupARNs:
        - Ref: LBTargetGroup
  #Bostion Host Autoscalling Launch configuration
  BOSLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-003634241a8fcdec0
      InstanceType: t2.micro
      #KeyName: mykey
      SecurityGroups:
        - Ref: BosServerSG
      AssociatePublicIpAddress: "true"
  #Bostion Host Autoscalling setup
  BOSAutoScalGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: BOSLaunchConfig
      MaxSize: '4'
      DesiredCapacity: '2'
      MinSize: '2'
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub '${ProjectName}-PUB-SUBNET'

  #LoadBalancing Listener/TargetGroup
  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          !Sub '${ProjectName}-VPCID'
  LBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'LBTargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'LBListener'
      Priority: 1
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'LBTargetGroup'
      LoadBalancerArn: !Ref 'LBAPP'
      Port: '80'
      Protocol: HTTP
  LBAPP:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${ProjectName}-PUB-SN1"
      - Fn::ImportValue: !Sub "${ProjectName}-PUB-SN2"
      SecurityGroups:
        - Ref: 'LoadSG'